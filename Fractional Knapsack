Given weights and values of N items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item. 

 

Example 1:

Input:
N = 3, W = 50
values[] = {60,100,120}
weight[] = {10,20,30}
Output:
240.00
Explanation:Total maximum value of item
we can have is 240.00 from the given
capacity of sack. 
Example 2:

Input:
N = 2, W = 50
values[] = {60,100}
weight[] = {10,20}
Output:
160.00
Explanation:
Total maximum value of item
we can have is 160.00 from the given
capacity of sack.



def fractionalKnapsack(N, W, values, weights):
    # Calculate the value-to-weight ratio for each item
    value_per_weight = [(values[i] / weights[i], values[i], weights[i]) for i in range(N)]

    # Sort the items based on the value-to-weight ratio in descending order
    value_per_weight.sort(reverse=True)

    total_value = 0.0
    current_weight = 0

    for i in range(N):
        if current_weight + value_per_weight[i][2] <= W:
            total_value += value_per_weight[i][1]
            current_weight += value_per_weight[i][2]
        else:
            remaining_capacity = W - current_weight
            total_value += (value_per_weight[i][0] * remaining_capacity)
            break

    return total_value

# Example usage
N1 = 3
W1 = 50
values1 = [60, 100, 120]
weights1 = [10, 20, 30]

N2 = 2
W2 = 50
values2 = [60, 100]
weights2 = [10, 20]

output1 = fractionalKnapsack(N1, W1, values1, weights1)
output2 = fractionalKnapsack(N2, W2, values2, weights2)

print(output1)  # Output: 240.0
print(output2)  # Output: 160.0
